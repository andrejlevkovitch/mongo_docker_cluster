version: '3.3'
services:
  # Routers
  router0:
    image: ${MONGO_IMAGE}
    container_name: router0
    volumes:
      - "${MONGO_HOST_KEYFILE}:${MONGO_CONTAINER_KEYFILE}"
    ports:
      - "${MONGO_HOST_PORT}:${ROUTER_PORT}"
    depends_on:
      - config-init
      - rs0-init
      - rs1-init
    command: mongos --port ${ROUTER_PORT} --configdb config-svr/config0:${CONFIG_PORT},config1:${CONFIG_PORT},config2:${CONFIG_PORT} --bind_ip_all --keyFile ${MONGO_CONTAINER_KEYFILE}

  # Config replica set
  config0:
    image: ${MONGO_IMAGE}
    container_name: config0
    environment: # The user will be using for authenicate to the cluster
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - "${MONGO_HOST_KEYFILE}:${MONGO_CONTAINER_KEYFILE}"
    command: mongod --port ${CONFIG_PORT} --configsvr --replSet config-svr --keyFile ${MONGO_CONTAINER_KEYFILE}

  config1:
    image: ${MONGO_IMAGE}
    container_name: config1
    volumes:
      - "${MONGO_HOST_KEYFILE}:${MONGO_CONTAINER_KEYFILE}"
    command: mongod --port ${CONFIG_PORT} --configsvr --replSet config-svr --keyFile ${MONGO_CONTAINER_KEYFILE}

  config2:
    image: ${MONGO_IMAGE}
    container_name: config2
    volumes:
      - "${MONGO_HOST_KEYFILE}:${MONGO_CONTAINER_KEYFILE}"
    command: mongod --port ${CONFIG_PORT} --configsvr --replSet config-svr --keyFile ${MONGO_CONTAINER_KEYFILE}

  # Shards
  rs0shard0:
    image: ${MONGO_IMAGE}
    container_name: rs0shard0
    environment: # We need user for connecting to the shard from other host (for initiation of shard replica set)
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - "${MONGO_HOST_KEYFILE}:${MONGO_CONTAINER_KEYFILE}"
    command: mongod --port ${RS0SHARD_PORT} --shardsvr --replSet rs0 --keyFile ${MONGO_CONTAINER_KEYFILE}

  rs0shard1:
    image: ${MONGO_IMAGE}
    container_name: rs0shard1
    volumes:
      - "${MONGO_HOST_KEYFILE}:${MONGO_CONTAINER_KEYFILE}"
    command: mongod --port ${RS0SHARD_PORT} --shardsvr --replSet rs0 --keyFile ${MONGO_CONTAINER_KEYFILE}

  rs0shard2:
    image: ${MONGO_IMAGE}
    container_name: rs0shard2
    volumes:
      - "${MONGO_HOST_KEYFILE}:${MONGO_CONTAINER_KEYFILE}"
    command: mongod --port ${RS0SHARD_PORT} --shardsvr --replSet rs0 --keyFile ${MONGO_CONTAINER_KEYFILE}

  rs1shard0:
    image: ${MONGO_IMAGE}
    container_name: rs1shard0
    environment: # We need user for connecting to the shard from other host (for initiation of shard replica set)
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - "${MONGO_HOST_KEYFILE}:${MONGO_CONTAINER_KEYFILE}"
    command: mongod --port ${RS1SHARD_PORT} --shardsvr --replSet rs1 --keyFile ${MONGO_CONTAINER_KEYFILE}

  rs1shard1:
    image: ${MONGO_IMAGE}
    container_name: rs1shard1
    volumes:
      - "${MONGO_HOST_KEYFILE}:${MONGO_CONTAINER_KEYFILE}"
    command: mongod --port ${RS1SHARD_PORT} --shardsvr --replSet rs1 --keyFile ${MONGO_CONTAINER_KEYFILE}

  rs1shard2:
    image: ${MONGO_IMAGE}
    container_name: rs1shard2
    volumes:
      - "${MONGO_HOST_KEYFILE}:${MONGO_CONTAINER_KEYFILE}"
    command: mongod --port ${RS1SHARD_PORT} --shardsvr --replSet rs1 --keyFile ${MONGO_CONTAINER_KEYFILE}

  ## INIT containers

  config-init:
    image: ${MONGO_IMAGE}
    volumes:
      - "./scripts:/scripts"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    depends_on:
      - config0
      - config1
      - config2
    command:
      - /bin/bash
      - -c
      - |
        sleep ${CONFIG_WAITING_TIME} # XXX need sleep because we have to connect for every shard in replica set
        /scripts/./init_config.sh config-svr ${CONFIG_PORT} config0 config1 config2

  rs0-init:
    image: ${MONGO_IMAGE}
    volumes:
      - "./scripts:/scripts"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    depends_on:
      - rs0shard0
      - rs0shard1
      - rs0shard2
    command:
      - /bin/bash
      - -c
      - |
        sleep ${RS_SHARD_WAITING_TIME} # XXX need sleep because we have to connect for every shard in replica set
        /scripts/./init_rs_shard.sh rs0 ${RS0SHARD_PORT} rs0shard0 rs0shard1 rs0shard2

  rs1-init:
    image: ${MONGO_IMAGE}
    volumes:
      - "./scripts:/scripts"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    depends_on:
      - rs1shard0
      - rs1shard1
      - rs1shard2
    command:
      - /bin/bash
      - -c
      - |
        sleep ${RS_SHARD_WAITING_TIME} # XXX need sleep because we have to connect for every shard in replica set
        /scripts/./init_rs_shard.sh rs1 ${RS1SHARD_PORT} rs1shard0 rs1shard1 rs1shard2

  router-init:
    image: ${MONGO_IMAGE}
    volumes:
      - "./scripts:/scripts"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    depends_on:
      - router0
    command:
      - /bin/bash
      - -c
      - |
        sleep ${ROUTER_WAITING_TIME} # XXX need sleeping time, because it will fail if replica set not initialized or not have primary node
        /scripts/./add_shard.sh router0 ${ROUTER_PORT} rs0 ${RS0SHARD_PORT} rs0shard0 rs0shard1 rs0shard2
        /scripts/./add_shard.sh router0 ${ROUTER_PORT} rs1 ${RS1SHARD_PORT} rs1shard0 rs1shard1 rs1shard2

